
import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import styles from './login.module.scss';
import { sessionOptions } from '../../helpers/sessionConfig';
import { getIronSession } from 'iron-session';


const AdminLoginPage: NextPage = (props: any) => {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");

    /*useEffect(() => {
        
    }, [])*/
    const loginFormSubmitted = async (event) => {
        event.preventDefault();
        const body = JSON.stringify({ username, password });
        const result = await fetch("/api/admin/session",
            {
                method: "POST",
                mode: "same-origin",
                headers: { "Content-Type": "application/json" },
                body
            })

        if (result.status === 200) {
            window.location.replace("/admin");
        }
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <div className={styles.formWrapper}>
                    <div className={styles.title}>Přihlášení do administrace</div>
                    <form className={styles.form} onSubmit={loginFormSubmitted}>
                        <input type="text" name="username" id="username" value={username} onChange={e => setUsername(e.target.value)} required />
                        <input type="password" name="password" id="password" onChange={e => setPassword(e.target.value)} required />
                        <input className={"button"} type="submit" value="Přihlásit!" />
                    </form>
                </div>
            </main>
        </div>
    )
}

export const getServerSideProps = async (context) => {
    const { req, res } = context;
    const session = await getIronSession(req, res, sessionOptions);
    const adminLogged: boolean | undefined = (session as any).adminLogged;

    if (!adminLogged
    ) {
        return {
            props: {},
        };
    } else {
        return {
            redirect: {
                destination: '/admin',
                permanent: false,
            }
        };
    }
}


export default AdminLoginPage;