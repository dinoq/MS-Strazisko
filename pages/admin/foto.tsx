import type { NextPage } from 'next'
import { withIronSession } from 'next-iron-session'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import classes from './foto.module.scss'

const AdminPhotosPage: NextPage = (props: any) => {
  const [breadcrumbItems, setBreadcrumbItems] = useState([]);
  const [yearEntries, setYearEntries] = useState([]);
  const [albumEntries, setAlbumEntries] = useState([]);
  const [photoEntries, setPhotoEntries] = useState([]);

  useEffect(() => {
    fetch("/api/admin/getYears").then((resp) => {
      if (resp.status == 200) {
        resp.json().then((json) => {
          setYearEntries(json);
          console.log('json.albums: ', json);
        });
      } else {
        resp.text().then((value) => {
          console.log("tvalue: ", value);
        });
      }
    });
  }, []);

  const yearClicked = (year) => {    
    fetch("/api/admin/getAlbums?year="+year).then((resp) => {
      if (resp.status == 200) {
        resp.json().then((json) => {
          setAlbumEntries(json);
          console.log('json: ', json);
          setBreadcrumbItems(prevState => [...prevState, year]);
        });
      } else {
        resp.text().then((value) => {
          console.log("tvalue: ", value);
        });
      }
    });
  }

  const albumClicked = (album, albumID) => {    
    fetch("/api/admin/getPhotos?albumID=" + albumID).then((resp) => {
      if (resp.status == 200) {
        resp.json().then((json) => {
          setPhotoEntries(json);
          setBreadcrumbItems(prevState => [...prevState, album]);
        });
      } else {
        resp.text().then((value) => {
          console.log("tvalue: ", value);
        });
      }
    });
  }

  return (
    <div className={""}>
      <Head>
        <title>Str√°nky</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={""}>
        <Breadcrumb items={breadcrumbItems} setItems={setBreadcrumbItems} />
        {
          (breadcrumbItems.length == 0) && yearEntries.map((entry) => {
            return (
              <div key={"year-" + entry.year} onClick={yearClicked.bind(this, entry.year)}>
                {entry.year}, {entry.password}
              </div>
            )
          })
        }
        {
          (breadcrumbItems.length == 1) && albumEntries.map((entry, index) => {
            return (
              <div key={"album-" + index} onClick={albumClicked.bind(this, entry.name, entry.id)}>
                {entry.id},{entry.date}, {entry.title}, {entry.name}
              </div>
            )
          })
        }
        {
          (breadcrumbItems.length == 2) && photoEntries.map((entry, index) => {
            return (
              <div key={"photo-" + index}>
                {entry.id},{entry.filename}
              </div>
            )
          })
        }
      </main>
    </div>
  )
}

const Breadcrumb = (props) => {

  let items: [] = props.items ? props.items : [];

  const resetNav = () =>{
    props.setItems([]);
  }

  const itemClicked = (index) =>{
    props.setItems(prevState => {
        return prevState.slice(0, index+1);
      });
  }
  return (
    <div className={classes.breadcrumb}>
      <span className={classes.breadcrumbItem + " link"} onClick={resetNav}>
        Foto
      </span>&nbsp;&gt;&nbsp;
      {items.map((item, index) => {
        return (
          <span key={"breadcrumb-item-" + index} className={""}>
            {index != 0 && " > "}
            <span className={classes.breadcrumbItem + " link"} onClick={itemClicked.bind(this, index)}>
              {item}
            </span>
          </span>
        )
      })}
    </div>
  )
}

export const getServerSideProps = withIronSession(
  async ({ req, res }) => {
    const adminLogged: Array<any> = req.session.get("adminLogged");

    if (adminLogged
    ) {
      return {
        props: {},
      };
    } else {
      return {
        redirect: {
          destination: '/admin/login',
          permanent: false,
        }
      };
    }
  },
  {
    cookieName: "myapp_cookiename",
    cookieOptions: {
      secure: process.env.NODE_ENV === "production" ? true : false,
    },
    password: "P5hBP4iHlvp6obqtWK0mNuMrZow5x6DQV61W3EUG",
  }
);

export default AdminPhotosPage
