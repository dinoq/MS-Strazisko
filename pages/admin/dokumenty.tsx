import type { NextPage } from 'next'
import { withIronSession } from 'next-iron-session'
import Head from 'next/head'
import Link from 'next/link'
import { useState } from 'react'
import AppTable from '../../components/Table/Table'
import { getApiURL } from '../../src/utils'
import classes from "./dokumenty.module.scss"


const AdminDocumentsPage: NextPage = (props: any) => {
    const documents: Array<any> = (props.docs) ? props.docs : [];
    const [fileManagerVisible, setFileManagerVisible] = useState(false);
    const [modalVisible, setModalVisible] = useState(false);
    const [deletedDocumentName, setDeletedDocumentName] = useState("")
    const [deletedDocumentID, setDeletedDocumentID] = useState(-1)

    const showFileManager = () => {
        setFileManagerVisible(true);
    }

    const hideFileManager = () => {
        setFileManagerVisible(false)
    }

    const deleteDocumentConfirmation = (name, id_documents) => {
        setDeletedDocumentID(id_documents);
        setDeletedDocumentName("\"" + name + "\"");
        setModalVisible(true);
    }

    const cancelDeletion = () => {
        setDeletedDocumentName("");
        setDeletedDocumentID(-1);
        setModalVisible(false);
    }

    const deleteDocument = async (event) => {
        // event.preventDefault();
        setDeletedDocumentName("");
        setDeletedDocumentID(-1);
        setModalVisible(false);
        const body = JSON.stringify({ id: deletedDocumentID });
        const result = await fetch("/api/admin/deleteDocument",
            {
                method: "POST",
                mode: "same-origin",
                headers: { "Content-Type": "application/json" },
                body
            })
        if (result.status == 200) {
            window.location.reload();
        }
    }

    const headerItems = [
        { content: "Název dokumentu" },
        { content: "URL" },
        { content: "Akce" },
    ]

    const bodyRows: Array<any> =
        documents.map((doc, index) => {
            const url = (doc?.url?.startsWith("/")) ? doc.url.substring(1) : doc.url;
            return ({
                items: [
                    { content: doc.name, className: "word-break-all" },
                    { content: (<Link href={"/dokumenty/" + url}><a target="_blank" className={"link"}>{"/dokumenty/" + url}</a></Link>), className: "word-break-all" },
                    { className: "actions", content: (<><span className={"link-danger"} onClick={deleteDocumentConfirmation.bind(this, doc.name, doc.id_documents)}>Smazat</span><span className={"link"}>Přejmenovat</span></>) }
                ]
            })

        })
/*
    bodyRows.unshift({
        items: [{
            colspan: 4,
            content: (<>
                {!fileManagerVisible && <span className={"link " + "add-document-btn mb-3"} onClick={showFileManager}>Přidat nový dokument</span>}
                {fileManagerVisible && <NewDocumentManager hideFileManager={hideFileManager} />}
            </>),
            className: "text-center"
        }]
    })*/

    console.log('bodyRows: ', bodyRows);
    return (
        <div className={""}>
            <Head>
                <title>Admin - Dokumenty</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={""}>
                <h1 className="text-center mb-4">Dokumenty</h1>
                <div className={"form-wrapper"}>
                    {!fileManagerVisible && <span className={"link " + "add-document-btn mb-3"} onClick={showFileManager}>Přidat nový dokument</span>}
                    {fileManagerVisible && <NewDocumentManager hideFileManager={hideFileManager} />}
                    <AppTable headerItems={headerItems} bodyRows={bodyRows} />
                    {modalVisible && <Modal deletedDocumentName={deletedDocumentName} cancelDeletion={cancelDeletion} deleteDocument={deleteDocument} />}
                </div>
            </main>
        </div>
    )
}

const NewDocumentManager = (props) => {
    const [fileLabel, setFileLabel] = useState("Vyberte soubor")
    const [file, setFile] = useState(null);
    const initFileName = "Název souboru";
    const [fileName, setFileName] = useState(initFileName);
    const [urlName, setUrlName] = useState("");

    const fileChange = (event) => {
        if (event?.target?.files[0]?.name?.length) {
            const f = event.target.files[0];
            setFile(f);
            setUrlName(f.name);
            setFileLabel("Vybráno: " + f.name);
            if (fileName === initFileName || fileName === "") {
                setFileName(f.name);
            }
        }
    }


    const uploadToServer = async (event) => {
        event.preventDefault();
        const body = new FormData();
        body.append("document", file);
        body.append("url", urlName);
        body.append("name", fileName);
        const response = await fetch("/api/admin/addDocument", {
            method: "POST",
            body
        });

        if (response.status == 200) {
            window.location.reload();
        }
    };

    const fileNameChanged = (e) => {
        setFileName(e.target.value);
    }

    const clearFileName = (e) => {
        if (fileName === initFileName) {
            setFileName("");
        }
    }
    return (
        <div className="bordered mb-3">
            <form className="d-flex flex-column" onSubmit={uploadToServer}>
                <input type="file" onChange={fileChange} name="file" id="file" className={"hidden-file-input"} />
                <div className="d-flex justify-content-center">
                    <label htmlFor="file" className="hidden-file-input-label">{fileLabel}</label>
                </div>
                <div className="d-flex justify-content-center">
                    <input type="text" onChange={fileNameChanged} onClick={clearFileName} name="file-name" id="file-name" className={classes.fileName} value={fileName} placeholder={initFileName} />
                </div>
                <div className="d-flex justify-content-center">
                    <input className="button" type="submit" value="Uložit" />
                    <input className="button button-danger" onClick={props.hideFileManager} type="button" value="Zrušit" />
                </div>
            </form>
        </div>
    )
}

const Modal = (props) => {


    return (
        <div className="modal-window">
            <div className="overlay" onClick={props.cancelDeletion}>

            </div>
            <div className="content">
                <div className="text">
                    Jste si jistí, že chcete dokument {props.deletedDocumentName} odstranit?
                </div>
                <div className="btns-container">
                    <button className="btn btn-lg btn-danger" onClick={props.deleteDocument}>Odstranit</button>
                    <button className="btn btn-lg btn-primary" onClick={props.cancelDeletion}>Ponechat</button>
                </div>

            </div>
        </div>
    )
}

export const getServerSideProps = withIronSession(
    async ({ req, res }) => {
        const adminLogged: Array<any> = req.session.get("adminLogged");

        if (adminLogged
        ) {

            let docs = await (await fetch(getApiURL("getDocuments"))).json();
            return {
                props: { docs },
            };
        } else {
            return {
                redirect: {
                    destination: '/admin/login',
                    permanent: false,
                }
            };
        }
    },
    {
        cookieName: "myapp_cookiename",
        cookieOptions: {
            secure: process.env.NODE_ENV === "production" ? true : false,
        },
        password: "P5hBP4iHlvp6obqtWK0mNuMrZow5x6DQV61W3EUG",
    }
);

export default AdminDocumentsPage